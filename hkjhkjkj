<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Lecteur HLS avec renouvellement</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 20px;
      background: #111;
      color: #eee;
    }
    video {
      width: 100%;
      max-width: 800px;
      height: auto;
      background: #000;
    }
    #status {
      margin-top: 10px;
      font-family: monospace;
      color: #0f0;
    }
  </style>
</head>
<body>
  <h2>Lecteur HLS avec renouvellement automatique</h2>
  <video id="videoPlayer" controls></video>
  <div id="status">[...] Chargement du flux</div>

  <!-- Hls.js -->
  <script src="https://cdn.jsdelivr.net/npm/hls.js@1.5.7/dist/hls.min.js"></script>

  <script>
    const video = document.getElementById('videoPlayer');
    const statusDiv = document.getElementById('status');
    let hls;

    function log(msg) {
      statusDiv.textContent = msg;
      console.log(msg);
    }

    function loadHlsStream(url) {
      log("üîÑ Chargement du flux...");

      if (Hls.isSupported()) {
        if (hls) hls.destroy(); // D√©truire l'instance pr√©c√©dente

        hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(video);

        hls.on(Hls.Events.MANIFEST_PARSED, () => {
          log("‚úÖ Manifest HLS charg√©.");
          video.play()
            .then(() => log("‚ñ∂Ô∏è Lecture d√©marr√©e."))
            .catch(e => {
              log("üîá Lecture bloqu√©e (interaction requise).");
              video.muted = true;
              video.play()
                .then(() => log("üîá Lecture en sourdine."))
                .catch(e => log("‚ùå Impossible de lire : " + e.message));
            });
        });

        hls.on(Hls.Events.ERROR, (event, data) => {
          log("‚ùå Erreur HLS : " + data.details);
          if (data.fatal) {
            switch (data.type) {
              case Hls.ErrorTypes.NETWORK_ERROR:
                log("üì° Erreur r√©seau. Tentative de rechargement...");
                hls.startLoad();
                break;
              case Hls.ErrorTypes.MEDIA_ERROR:
                log("üéûÔ∏è Erreur m√©dia. Tentative de r√©cup√©ration...");
                hls.recoverMediaError();
                break;
              default:
                log("üí• Erreur fatale. Arr√™t du lecteur.");
                hls.destroy();
                break;
            }
          }
        });
      } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
        // Pour Safari
        video.src = url;
        video.addEventListener('loadedmetadata', () => {
          log("‚úÖ Flux charg√© (Safari).");
          video.play().catch(e => log("üîá Lecture bloqu√©e : " + e.message));
        });
      } else {
        log("üö´ Navigateur non support√©.");
      }
    }

    // URL du flux HLS avec token
    const streamUrl = "https://v3.vidzy.org/hls2/04/00021/d4kgdzcyz3ge_n/index-v1-a1.m3u8?t=O_6_KEhiMgcvGonOIxdr6F67CNsnUzBE-WYAywTJ7Do&s=1758821604&e=172800&f=106425&i=0.0&sp=0";

    // Charger le flux au d√©marrage
    loadHlsStream(streamUrl);

    // Renouveler l‚ÄôURL toutes les 60 secondes
    setInterval(() => {
      log("üîÅ Rechargement du flux...");
      loadHlsStream(streamUrl);
    }, 60000); // 60 secondes
  </script>
</body>
</html>
